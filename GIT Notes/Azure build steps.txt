*************************Dotnet framework Projects steps*************************************
Build Engine = MSBuild
Restore Engine = Nuget Package Manager
Type  = ASP.net MVC
Build File = .sln or .proj

packages.conf = list of dependency packages to download from restore
############################# Power Shell ###################################

$ new-item c:\Aspproject -itemtype directory -force
$ cd <project folder>
$ git clone <URL>
Next search for .sln file which has to be build
$ Cd <sln file path>
#Restore application using nuget
$ nuget restore <.sln file>  
#for installing specific softwares in nuget
$ nuget Install <software>
# Build the project with build engine
$ msbuild <.sln path> -t:build -p:configuration="Release" -p:platform="Any CPU" -p:outdir="C:/Test"

****************************************************************************************************************
Quality Gates
A quality gate is the best way to enforce a quality policy in your organization.
Quality Gates can be defined as a set of threshold measures set on your project. Few conditions that can be in included are listed below.
1.Code Coverage > certain value
2.Number of Blocker issues >certain value
3.Security Rating / Unit Test Pass Rate etc..

Steps: 
Begin:::
The begin step is executed when you add the begin command line argument. It hooks into the MSBuild pipeline, downloads SonarQube quality profiles and settings and prepares your project for the analysis.
$ dotnet sonarscanner begin /k:"project-key" 
Build:::
Between the begin and end steps, you need to build your project, execute tests and generate code coverage data. 
$ dotnet build <path to solution.sln>
End
The end step is executed when you add the "end" command line argument. It cleans the MSBuild hooks, collects the analysis data generated by the build, the test results, the code coverage and then uploads everything to SonarQube.
$ dotnet sonarscanner end 
Syntax: Use Maven Command line to publish reports to SonarQube
****project containing pom.xml file and type:
mvn clean install sonar:sonar -Dsonar.host.url=http://localhost:9000 -Dsonar.analysis.mode=publish


***********************ASP.Net Core Projects*****************************************

Buildengine = Dotnet.exe Build
Restore engine = Dotnet.exe restore
Type = ASP.NET Core
Build File = 
Publish = Dotnet publish

packages.json = list dependency packages
or .sln file

############################# Power Shell ###################################

$ new-item c:\Coreproject -itemtype directory -force
$ cd <project folder>
$ git clone <URL>
$ dotnet restore <project file>
$ dotnet build <project file>
$ dotnet publish <project file> -c "Release" -o "c:\core"

******************************************************************************************************************

*****************************JAVA /Maven Projects**************************
Build Engine = Maven 
Type = java
Build File = pom.xml

###################### Power Shell #################################

$ mvn compile
$ mvn test package
$ mvn clean package
$ mvn clean verify -PintegrationTests





Specify events that trigger pipelines and Trigger Types
https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?view=azure-devops&tabs=classic



