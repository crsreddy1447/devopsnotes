LINUX SHELL

$ cat /etc/shells   ----> To Know the types of shells present on the linux

#! <which bash>
#! /bin/bash                ----> Should be present at the start of the Shell script

echo $<variable>
echo $BASH
echo $BASH_VERSION

*** $ man <function>      ---> Help of that function 

Want to take value from terminal use "read" command
read ----> To provide values in output terminal
Ex: read name
      echo $ name
	  
*** To Execute the shell file  directory/file.sh 
############### Imp key words for Shell #############################

 -s   ---> to hide the display of words (mostly for Passwords)
-p   ---> To enter the value in the same line
-sp  ---> to enter without dispaly of value
-a  ---> To enter in array format
$REPLY  ----> Built in variable. If No variable is mentioned in read
args=("$@")  ---> to print aruments in array form
$# ---> to print No.of Arguments

Comparison Operators 
***Note:  For integer value we use alpha characters. For String values we use symbols
-eq --- > equal     =/==
-ne  ---> Not equal  != 
-gt  ---> greater than  <
-ge ---> greater than or equal   <=
-lt  ---> less than  >
-le ---> less than or equal  >=

-z  ---> String is null that has zero length

File operations
-e  ---> to check the file name
-f  ---> to check the file and also it is regular file or not
-b  --->to check block special name (binary --- video file etc)
-c  ---> to check character special file (file with text and numbers)
-d  ---> to check the directory name
-s  ---> to check the file is empty or not

Logical Operators
&&   ----> AND
||     ----> OR

bc  is a language that supports arbitrary precision numbers with inter  active execution of statements.
bc -l  ---> to call maths library
ex: echo "scale=2;sqrt($num)" | bc -l
      echo "scale=2;4^4" | bc -l


Note:  echo $(expr $num1 * $num2)       --->  is syntax error for using expr
          echo $(expr $num1 \* $num2)       ----> expr is there we have to use / only for multiplication
 
 
NOTE: 
while loop executes only if condition is true
ex: while (( $n <= 10 ))   
until loop executes only if the condition is false 
ex: while (( $n => 10 )) 
 
*** "readonly" is used only to assign a fixed value only once. We can't reassign other value.
ex: var=40
readonly var
*** "readonly" is used only to assign a fixed function only once. We can't overwrite the function.
ex: hello()
{echo "Hello"}
readonly -f hello

 
Note: 
* for loop display value after we give input
select loop display value we have to select one from it.
 
*******ex: 1: user name and pwd*********************
#! /bin/bash
read -p 'username :' user
read -sp 'Password: ' password
echo
echo $user
echo $password

************************************************************
*************** if and else statement **************************
#! /bin/bash
word=raja
if [[ $word == "rrr" ]]
then
  echo "Condition is rrr is true"
elif [[ $word == "raja" ]]
then
   echo "condition Raja is true"
else 
  echo "condition is False"
fi	  

**********************************************************************
********** To Append text and to check write permission of a file **************
#! /bin/bash

echo -e "Enter the name of file : \c"
read  file_name

if [ -f $file_name ]
then
    if [ -w $file_name ]
    then
       echo "Type some text and exit"
       cat >> $file_name
    else 
       echo "The file doesnot have write permission"
    fi
else
echo " $file_name not exists "
fi

*************************************************************************************************
****************** Maths Function Square and Sq root *******************************
#! /bin/bash

num=9
echo "scale=2;sqrt($num)" | bc -l
echo "scale=2;4^4" | bc -l

*************************************************************************************************
*************** CASE type *******************************************************************
#! /bin/bash
echo -e "Enter Some Value : \c"
read  item
case $item in
  "car" )
   echo " rent of $item is 100 dollar" ;;
  "bike" )
   echo " rent of $item is 50 dollar" ;;
  "cycle" )
   echo " rent of $item is 10 dollar" ;;
  "truck" )
   echo " rent of $item is 150 dollar" ;;
  * )  # value of all
   echo " Unknown Vehicle" ;;
esac

************************************************************************************************
************ While LOOP *******************************
#! /bin/bash
echo -e " Enter n Value :  \c:  "
read n
while (( $n <=10 ))   # while [ $n -le 10 ]   ----> any one format can be used.
do
  echo "$n"
  (( ++n ))
done

************************************************************************************************
**************** FOR LOOP **************************************************
#! /bin/bash
for command in ls pwd date  # these three are commands to execute
do
  echo "***********$command*******************"
  $command
done

******************************************************************************************************
****************** SELECT LOOP ************************************
#! /bin/bash
select item in car bike cycle truck
do
   case $item in
  "car" )
   echo " rent of $item is 100 dollar" ;;
  "bike" )
   echo " rent of $item is 50 dollar" ;;
  "cycle" )
   echo " rent of $item is 10 dollar" ;;
  "truck" )
   echo " rent of $item is 150 dollar" ;;
  * )  # value of all
   echo " Unknown Vehicle" ;;
esac
done

**********************************************************************************************************
 **************BREAK: ***************************************
 #! /bin/bash
for (( i=1 ; i<=10 ; i++ ))
do
   if (( $i > 5 ))
    then
    break
   fi
   echo "$i"
done

****************************************************************************************************
*************************Continue*****************
#! /bin/bash
for (( i=1 ; i<=10 ; i++ ))
do
   if [ $i -eq 3 -o $i -eq 6 ]
    then
    continue
   fi
   echo "$i"
done
************************************************************************************************
*************************Functions*********************************
#! /bin/bash
function hello()
{
echo "HIIIIIIIII"
}

quit () 
{
exit
}

hello        # calling Funtions
echo "How are you"
quit         # calling Funtions
*****************************************************************************************************
************* Local vs Global Variable *********************************
#! /bin/bash

function print(){
local name=$1               # Local variable is accessable only in the function print
echo "The name is $name "
}
name="RAJA" 
echo "The name is $name Before"              # name here is global variable
print Shekar                # as it is local so it displays only once when print is called 
echo "The name is $name After"             # name here is global variable
echo "HI how are you"

******************************************************************************************************
**************** Find a file present or not by calling function ************
#! /bin/bash
usage()
{
echo "Provide the argument : "
echo "usage : $0 file_name"
}

 is_file_exist()  ##funtion
   {
   local file="$1"  ## here "$1" is one arugement has to pass

## Here [[ -f "$file" ]] is used to give file name (-f)

    [[ -f "$file" ]] && return 0 || return 1 
    }

## Here "$#" used for giving no of arugements

[[ $# -eq 0 ]] && usage  ### if noof arg is zero goto usage function warning

if ( is_file_exist "$1")
then
  echo "file found"
else
  echo "file  NOT found"
fi

***************************************************************************************************












	  
	  