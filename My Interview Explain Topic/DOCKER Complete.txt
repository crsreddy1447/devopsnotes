##### DOCKER COMPLETE
Virtualization is the process of creating a software based virtual version of servers, apps, storage etc.
Virtuaalization is the process where one system is splitted into many different sections, which was done by hypervisor.

Diff Virtualization and Containerization
Containers provide an isolated environment for running the application. The entire user space is explicitly dedicated to the application. 
Any changes made inside the container is never reflected on the host or even other containers running on the same host. 
Containers are an abstraction of the application layer. Each container is a different application.
Virtualization, hypervisors provide an entire virtual machine to the guest(including Kernal). 
Virtual machines are an abstraction of the hardware layer. Each VM is a physical machine.

Docker is a platform for developers and sysadmins to build, run, and share applications with containers.
Containerization is increasingly popular because containers are:
Flexible, Lightweight, Portable, Loosely coupled, Scalable, Secure, Short boot-up process.

Container is nothing but a running process, which is encapsulated in order to keep it isolated from the host and from other containers.
Each container interacts with its own private filesystem which is provided by a Docker image.An image includes everything needed to run an application.
A container runs natively on Linux and shares the kernel of the host machine with other containers.

DOCKER IMAGE: 
An image is a text file with a set of pre-written commands, usually called as a Docker file
Docker Images are made up of multiple layers which are read-only filesystem
A layer is created for each instruction in a Docker file and placed on top of the previous layer
When an image is turned into a container the Docker engine takes the image and adds a read-write filesystem on top.
 
Docker Pull Work:
First docker daemon look for a image in the local repo. If not found then it looks in docker registry. If found it pill the images and stores in local repo.

Container - Connection Modes:
Detached Mode: $ docker run –itd ubuntu:xenial  --->itd
1. user Manages from Daemon
2. Allow control over containers

Root User Mode: $ docker run –it ubuntu:xenial  --->it
* I-Interactive  T-Conected To Terminal  D-Detached Mode
1. User manages from root
2. Allow control over the containers of which user is attached.

Docker run : Interactive Connected to Terminal
▪ docker run –it <image-name> : This allows the docker container to run in the interactive mode as well as prevent it from exiting
Use ctrl+P+Q to get out of container without exiting

Docker run : Detached Mode:
docker run –d <image-name> : This allows the container to run a service in the background
Containers started in detached mode exits when the root process used to run the container exits
A container in detached mode cannot be automatically removed when it stops. Container stops when the root process used to run container stops.

Docker Volume:
Volumes are stored in a part of the host filesystem which is managed by Docker (/var/lib/docker/volumes/ on Linux)
when you use a volume, a new directory is created within Docker’s storage directory on the host machine
volumes stored in docker's "private" storage area
volumes can be created by the docker engine when the container starts.
Bind mounts:  When you use a bind mount, a file or directory on the host machine is mounted into a container.
mount binds can be stored anywhere
mount bind have to exist prior to starting the docker container


Docker Namespace:
amespace adds a layer of isolation in containers. Docker provides various namespaces in order to stay portable and not affect the underlying host system. 
Few namespace types supported by Docker – PID, Mount, IPC, User, Network.

Docker machine: is a tool that lets you install Docker Engine on virtual hosts. Docker machine also lets you provision Docker Swarm Clusters.

Copying Data To And From Containers
$ docker cp <container name>:<Source path> <Destination Path>

Commands Related To Docker File:
FROM: It shows where is the base image coming from.
MAINTAINER: The section of the Docker file shows the maintainer or the owner of the Docker file.
RUN : It is used to take the commands as its argument and runs it to form an image
CMD: Command for starting up of a service of some kind.  the actions to run when the containers are initiated is described in this section.
    Anything that is after a command is a list of things to run within any container that is initiated on a base image
ENV : It is used to set one or more environment variables as as $variable_name or ${variable_name}
WORKDIR : It defines the location where the command defined by cmd is to be executed
VOL : It is used to enable access from your container to a directory
ADD : It copies the file into the containers own file system from the source on the host at the stated destination
EXPOSE : It is used to expose the port to allow networking between the running process inside the container

DIFF B/W RUN CMD  ENTRYPOINT
RUN executes command(s) in a new layer and creates a new image. It is often used for installing software packages
▪ CMD sets default command and/or parameters, which can be overwritten from command line when docker container runs
▪ ENTRYPOINT configures a container that will run as an executable
>CMD : Can be changed. Latest one will be executed
 >ENTRY POINT: Cant be changed 
 
ADD Vs COPY	Commands in Dockerfile
ADD:
Synatx:  ADD <source/url> <destination>
EX: ADD https://jdk 8.0..... /usr/local/tomcat/webapps/java.war
-->ADD can copy from local to internet and also from internet to local

COPY:
Syntax: COPY <source file> <destination>
EX: COPY jenkins.war /usr/local/tomcat/webapps/jenkins.war
---> COPY can only copy from local to internet
---> COPY dont accept url path. 

Importing and Exporting a Container to share with others:
$ docker export <container ID> > <name.tar>
$ docker import - <image name> <name.tar>    after this upload to webserver for download
$ docker save -o <name.tar> <image name>     ----> To deal with committed images
$ docker load < <name.tar>

For pushing the image to docker hub add the image tag as <Docker username>/<image Name>

Docker Compose: is a YAML file which contains details about the services, networks, and volumes for setting up the Docker application.
So, you can use Docker Compose to create separate containers, host them and get them to communicate with each other. 

Docker Swarm: serves the standard Docker API, any tool that already communicates with a Docker daemon can use Swarm to transparently scale to multiple hosts.

Will you lose your data, when a docker container exists?
No, you won’t lose any data when Docker container exits. Any data that your application writes to the container gets preserved on the disk until you explicitly delete the container.

Monitor Docker in production:
Docker provides functionalities like docker stats and docker events to monitor docker in production. Docker stats provides CPU and memory usage of the container. 
Docker events provide information about the activities taking place in the docker daemon.

What changes are expected in your docker compose file while moving it to production?
Remove volume bindings, so the code stays inside the container and cannot be changed from outside the container.
Binding to different ports on the host.
Specify a restart policy
Add extra services like log aggregator

####DOCKER
1.Version of Docker using

2.Best Practices of Docker
ANS:1.CMD VS RUN ----> Lot may run increases layers and size Less runs and using shell commnds execution
    2. Base image vs scratch
	3. Once dependency files should should be there and other remove
	4. Build from source in a consistent environment: Java application requires Maven and the JDK, so let’s base our Dockerfile off of a specific minimal official maven image from Docker Hub, that includes the JDK.
	5. Instead, use more specific tags instead of Latest for your base images. In this case, we’re using openjdk. Ex: FROM openjdk:8
	6. Use official images when possible which save a lot of time spent on maintenance.
	7. Remove unnecessary dependencies using –no-install-recommends flag which ensures that dependencies that were not actually needed are not installed
	8. Use COPY instead of ADD: With COPY, you must declare the locations., ADD creates the destination directory when it doesn’t exist. Add command is more risky.

3.Difference between Docker Image and Container?
Docker Image is a set of files which has no state, whereas Docker Container is the instantiation of Docker Image. 
In other words, Docker Container is the run time instance of images.
A Docker image is non-changeable file containing libraries, source code, tools and other files needed to run applications.
Docker container is nothing but an environment virtualized during run-time to allow users to isolate applications from the system underpinning it. 

4.Can we Run multiple services in a container?
Generally recommended that you separate areas of concern by using one service per container. It’s ok to have multiple processes instead of services
The container’s main process is responsible for managing all processes that it starts.
Docker Compose makes it easy to run multi-container Docker applications. You can configure all your containers in one file and run them at once with a single command.
	
5.Docker Kill VS Docker Stop
docker stop: Stop a running container (send SIGTERM, and then SIGKILL after grace period) [...] The main process inside the container will receive SIGTERM, and after a grace period, SIGKILL. [emphasis mine]
docker kill: Kill a running container (send SIGKILL, or specified signal) [...] The main process inside the container will be sent SIGKILL, or any signal specified with option --signal. [emphasis mine]

6.command for listing all the exited containers
Ans:docker ps --filter "status=exited"

7.How to clean up docker host(Not used images)
The docker image prune command allows you to clean up unused images. By default, docker image prune only cleans up dangling images. A dangling image is one that is not tagged and is not referenced by any container. To remove dangling images:
$ docker system prune  --->Prune everything
$ docker volume prune  --->Prune volumes
$ docker container prune --->Prune containers
$ docker image prune --->Prune images

8.Can an image contain more containers?
No, one image will be started as one container

9.Can a Container contain more than one process?
Yes, like apache + sshd, and in docker world, prefer to service/ app for one container

9.Can I launch multiple containers from a single image?
Yes, it is like one binary files can be started several times with different process. In docker

10.Can I launch an operating system from an image?
Yes, and it shall the same kernel with the docker host

11.Can we have Multiple CMD in Docker file?
No. Even if we write multiple CMD it will execute last cmd
In order to run multiple commands in docker, use /bin/bash -c with a semicolon ;
$ docker run image /bin/bash -c "cd /some/path; python a.py"

12.Can we have container with multiple images?
Not a good process to hve multiple images in a container
Multi-stage build Dockerfile
Multi-stage builds are a new feature requiring Docker 17.05 or higher.
This can be achieved using multi-stage Dockerfile. have multiple FROM commands on the same Dockerfile. The last one will actually produce the image while the others will just create the intermediate images.
The FROM will allow you to name one specific build by using the AS keyword. 
acessible commands like COPY --from=<image_AS_name|image_number>,  line copies just the built artifact from the previous stage into this new stage.
Ex: FROM ubuntu AS base  ---> FROM base AS dependencies ----> FROM base AS release
base, dependencies and test. The final image will be produced by the final FROM defined on release.
Each one will be built, following the following order: base -> dependencies -> test -> release. If any step of the build fails, no final image is generated.


13.Can we have Docker multiple entrypoints
No. Cant have multiple entry points.  if you wan to launch several processes in a docker container, you have to use supervisor.
supervisor to tell him to launch your different processes. But supervisor is not recommended. Instead go for Docker compose.
Ex: ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf 
    ENTRYPOINT ["/usr/bin/supervisord"]
And add a configuration a file supervisord.conf	
[supervisord]
nodaemon=true
[program:mongodb]
command=/etc/mongod/mongo #To adapt, I don't know how to launch your mongodb process
[program:apache2]
command=/usr/sbin/apache2 -DFOREGROUND

14.Docker Swarm and Docker Compose

15.Docker Load and Docker Save
docker load:Load an image or repository from a tar archive (even if compressed with gzip, bzip2, or xz) from a file or STDIN. It restores both images and tags.
Format: $ docker load [OPTIONS]
Ex: $ docker load < busybox.tar.gz
docker save:Save one or more images to a tar archive (streamed to STDOUT by default).  Contains all parent layers, and all tags + versions, or specified repo:tag, for each argument provided.
Format: docker save [OPTIONS] IMAGE [IMAGE...]
Ex: $ docker save busybox > busybox.tar

16.A volume is attached to container. If container crashes what happen to volume?

17.can we copy a file from local to docker container without login into docker container
(OR) How to transfer docker images from one machine to another without using a repository?
Saving docker image:
Save the docker image using docker save command.
$ docker save my-image:1.0.0 > saved-image.tar
above command would create saved-image.tar with image data in current directory.
Transferring image:
Once saved, transfer the .tar file to target server using any of the file transfer protocols like FTP or SCP.
$ scp file.txt remote_username@10.10.0.2:/remote/directory
Loading docker image:
Once the .tar file is transferred to target machine, login to target machine and load the image into local registry using docker load command.
docker load < saved-image.tar
Verify that the image is available on target machine by executing docker images command.

18.Huge file has to be sent to daemon which takes much time. How will you send in better method?
using Volume -v and bind mounts

19.Inside container many changes like delete, create, modify but I want to check which file is deleted and which action has been taken. What is the command?

20.ONBUILD instruction in Dockerfile
The ONBUILD instruction adds to the image a trigger instruction to be executed at a later time, when the image is used as the base for another build. 
The trigger will be executed in the context of the downstream build, as if it had been inserted immediately after the FROM instruction in the downstream Dockerfile.

21. use of .dockerignore file
Using this file, you can specify ignore rules and exceptions from these rules for files and folder, that won’t be included in the 
build context and thus won’t be packed into an archive and uploaded to the Docker server.
Before the docker CLI sends the context to the docker daemon, it looks for a file named .dockerignore in the root directory of the context. If this file exists, 
the CLI modifies the context to exclude files and directories that match patterns in it. This helps to avoid unnecessarily sending large or sensitive files and 
directories to the daemon and potentially adding them to images using ADD or COPY. All the ignored files are stored in .ignore folder.

22.In dockerfile how to give arg. If supply 1 gives maven 2.x version. supply 2 gives  maven latest how?
The ARG instruction defines a variable that users can pass at build-time to the builder with the docker build command using the --build-arg <varname>=<value> flag.
Ex: FROM ubuntu
    RUN apt -y install tomcat-$arg
	....
$ docker build --build-arg arg=8 .













