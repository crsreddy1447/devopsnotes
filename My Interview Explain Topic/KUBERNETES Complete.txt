#### KUBERNETES COMPLETE

Kubernetes is an open source container orchestration engine for automating deployment, scaling, and management of containerized applications.
A Kubernetes cluster consists of a set of worker machines, called nodes, that run containerized applications. Every cluster has at least one worker node.

POD: 
A Pod is the basic execution unit of a Kubernetes application--the smallest and simplest unit in the Kubernetes object model that you create or deploy.
**Each POD many have multiple containers. But “one-container-per-Pod” is recommended.
Each Pod is meant to run a single instance of a given application.
Pods provide two kinds of shared resources for their constituent containers: networking and storage.
Each Pod is assigned a unique IP address.Every container in a Pod shares the network namespace, including the IP address and network ports.
A Pod can specify a set of shared storage volumes. All containers in the Pod can access the shared volumes, allowing those containers to share data.
A Pod is not a process, but an environment for running a container. A Pod persists until it is deleted.

Terminology and Controllers:
ReplicaSet: the default, is a relatively simple type. It ensures the specified number of pods are running
Deployment: is a declarative way of managing pods via ReplicaSets. Includes rollback and rolling update mechanisms
Daemonset: is a way of ensuring each node will run an instance of a pod. Used for cluster services, like health monitoring and log forwarding
StatefulSet: is tailored to managing pods that must persist or maintain state
Job and CronJob: run short-lived jobs as a one-off or on a schedule.

NODES:
A node is a worker machine in Kubernetes, previously known as a minion.A node may be a VM or physical machine.
Each node contains the services necessary to run pods and is managed by the master components. The services on a node include the container runtime, kubelet and kube-proxy.
Node is externally created by cloud providers.
three components that interact with the Kubernetes node interface: 
Node controller:  is a Kubernetes master component which manages various aspects of nodes like Node status, Node health, assign cidr block to node.
Kubelet: An agent that runs on each node in the cluster. It makes sure that containers are running in a Pod.
kube-proxy: kube-proxy is a network proxy that runs on each node in your cluster. kube-proxy maintains network rules on nodes.
Container Runtime: The container runtime is the software that is responsible for running containers.

***Heartbeats, sent by Kubernetes nodes, help determine the availability of a node. 
Cluster:
A cluster is a set of computers working as an instance managed by Kubernetes
You can have up to 5,000 nodes in a cluster.
Regional clusters have masters and nodes spread across 3 zones for high availability and resilience from single zone failure and downtime during master upgrades.

Image REFER DOC of GOOGLE Kubernetes Basic

CLUSTER >>> NODE >>> POD  
CLUSTER = NODES + MASTER
NODE = PODS + Containers
POD = Containers

Labels are arbitrary metadata you can attach to any object in the Kubernetes API. Labels tell you how to group these things to get an identity. This is the only way you
can group things in Kubernetes.
EX: 4pods 3 Labels
labels APP: MYAPP; Phase:test/prod; Role: Front End/ Back End/

Volumes: 
Volumes are a way for containers within a pod to share data, and they allow for Pods to be stateful. These are two very important concerns for production applications.
There are many different types of volumes in Kubernetes. Some of the volume types include long-lived persistent volumes, temporary, short-lived emptyDir volumes, and
networked nfs volumes.

Kubernetes - Cluster Architecture:

Kubernetes - Master Machine Components--->
1. etcd: It stores the configuration information which can be used by each of the nodes in the cluster. It is a distributed key value Store which is accessible to all.
2. API Server(MAIN): The Kubernetes API server validates and configures data for the api objects which include pods, services, replicationcontrollers, and others. It helps in communication of pods by using kubectl
3. Controller Manager: It is responsible for maintaining desired states mentioned in the manifest.
4. Scheduler: It watches for new work tasks and assigns them to healthy nodes in the cluster. The scheduler is responsible for workload utilization and allocating pod to new node.

Pods.yml ----> To create only pods
ReplicationController ---> To create replication on pods
Service ---> To expose Node port or for Load Balance
ReplicaSet  ---> To create pods or versioning or rolling updates without downtime. Used in Deployment

Required are 
1. ReplicationController (RC)
2. Service
3. ReplicaSet is same as RC with memory storage of previous

Kubernetes Options for Installation
1. Bare-Metal Installations:
Start from OS      Install Every Component      K8s the hard way      Other Managed Installations:
2. Popular options
minikube (developer)      micro k8s (developer)       kube-admin       kops
3. Cloud-Provider Installations:
GKE AKS EKS

Heapster:
Heapster is a performance monitoring, metrics collection system, and aslo allows events and signal generated by cluster compatible with Kubernetes versions 1.0. 6 and above
Minikube:
Minikube is a tool that makes it easy to run Kubernetes locally. Minikube runs a single-node Kubernetes cluster inside a Virtual Machine (VM) on your laptop for users looking to try out Kubernetes or develop with it day-to-day.
Kubelet:
It is an agent service which runs on each node and enables the slave to communicate with master. So Kubelet works on the description 
of containers provided to it in the podspec and make sure that the containers describe in the PodSpec are healthy and running.
Kubectl:
Kubectl is the platform using which you can pass commands to the cluster. SO it basically provide the cli to run commands against the kubernetes cluster with
various ways to create and manage the kubernetes components.
KUBEPROXY:
It runs on each node and can do simple TCP/UDP packet forwarding across backend network service.

Replica Set VS Replication Controller
Replica Set manifest works on "Set based Selector" Which means it will use matchLabels and matchExpression to replicate the pods.
Ex: matchLabels: env in (prod, qa);  matchExpression: tier notin (frontend, backend)
Replication Controller manifest works on "Equity based Selector" Which means If the label name matches then only it creates replica for that label-selectors.
EX: APP = Ngnix; env = prod ; tier != frontend 

kubectl drain: command is used to drain a specific node during maintenance. Once this command is given, the node goes for maintenance and is made unavailable to any user.

API versions:
Alpha level:(for example, v1alpha1).  prone to errors but the user can drop for support to rectify errors at any time. 
Beta level:(for example, v2beta3). Scripts present in this version will be firm since because they are completely tested
Stable level:(vX X is integer) Stable level versions get many updates often

Kubernetes persistent volumes are administrator provisioned volumes. These are created with a particular filesystem, size, and identifying characteristics such as volume IDs and names.

Kubernetes volume:
https://kubernetes.io/docs/concepts/storage/volumes/
Local: A local volume represents a mounted local storage disk or Dir. Used only for static provision of PersistentVolume. More durable than Hostpath.
AWS ElasticBlockStore: mounts an Amazon Web Services (AWS) EBS Volume into your Pod.nodes on which Pods are running must be AWS EC2 instances. Instances need to be in the same region and availability-zone.
NFS (Network File System): nfs volume allows an existing NFS (Network File System) share to be mounted into your Pod.
ConfigMap: The configMap resource provides a way to inject configuration data into Pods. The data stored in a ConfigMap object. You must create a ConfigMap before you can use it.
Flocker: Flocker is an open-source clustered Container data volume manager. A flocker volume allows a Flocker dataset to be mounted into a Pod.
gcePersistentDisk: A gcePersistentDisk volume mounts a Google Compute Engine (GCE) Persistent Disk into your Pod.  You must create a PD using gcloud before you can use it.
PersistentVolumeClaim: A persistentVolumeClaim volume is used to mount a PersistentVolume into a Pod. User dont need to know where they are created.

Recreate and Rolling UpdateDeployment Strategy:
Recreate is used to kill all the running (existing) replication controllers and creates newer replication controllers. Recreate helps the user in faster deployment whereas it increases the downtime.
Rolling update also helps the user to replace the existing replica controller to newer ones. But, the deployment time is slow and in fact, we could say, there is no deployment at all
Create deployment: 

Kubernetes Name space:
Namespaces are given to provide an identity to the user to differentiate them from the other users. Namespace assigned to a user must be unique
Namespaces assist information exchange between pod to pod through the same namespace. Namespaces are a way to divide cluster resources between multiple users.
Kubernetes starts with three initial namespaces:
default The default namespace for objects with no other namespace
kube-system The namespace for objects created by the Kubernetes system
kube-public This namespace is created automatically and is readable by all users

Kubernetes load balancing:
Internal load balancing: used to balance the loads automatically and allocates the pods within the necessary configuration
External load balancing: It transfers or drags the entire traffic from the external loads to backend pods.

Kubernetes Liveness and Readiness Probes:
Liveness Probes:
Kubernetes uses liveness probes to know when to restart a container. If a container is unresponsive perhaps the application is not working
Liveness probe checks the container health as we tell it do, and if for some reason the liveness probe fails, it restarts the container. 
Readiness Probes:
Kubernetes uses readiness probes to decide when the container is available for accepting traffic. A pod is considered ready when all of its containers are ready. 
If a pod is not ready, it is removed from service load balancers. Here if the container is not ready it fails the request or route it to other pods, which are capable of servicing requests.

Can we have multiple containers in a pod?
Yes. But not recommended. it is harder to troubleshoot the container because logs from different processes will be mixed together, and it is harder manage the processes lifecycle

Can we have same containers in a pod
Yes, you can add multiple container with same image. but with different port numbers

Can we deploy a particular pod on to a particular node
You can use node selectors to place specific pods on specific nodes, all pods in a project on specific nodes, or create a default 
node selector to schedule pods that do not have a defined node selector or project selector. nodeSelector is a field of PodSpec.

Which one is Default deployment strategy? How it works?
The rolling deployment is the standard default deployment to Kubernetes. It works by slowly, one by one, replacing pods of the previous 
version of your application with pods of the new version without any cluster downtime.
A rolling update waits for new pods to become ready via your readiness probe before it starts scaling down the old ones. If there is a problem, the rolling update or deployment can be aborted without bringing the whole cluster down. 

Recreate
In this type of very simple deployment, all of the old pods are killed all at once and get replaced all at once with the new ones.

Command to check logs in POD
$ kubectl -n kube-system logs -f podname

Service types in KUBERNETES?
Ans: There are four types of Kubernetes services:
ClusterIP. This default type exposes the service on a cluster-internal IP. You can reach the service only from within the cluster.
NodePort. This type of service exposes the service on each node’s IP at a static port. A ClusterIP service is created automatically, and the NodePort service will route to it. From outside the cluster, you can contact the NodePort service by using “<NodeIP>:<NodePort>”.
LoadBalancer. This service type exposes the service externally using the load balancer of your cloud provider. The external load balancer routes to your NodePort and ClusterIP services, which are created automatically.
ExternalName. This type maps the service to the contents of the externalName field (e.g., foo.bar.example.com). It does this by returning a value for the CNAME record.
.
Objects in Kubernetes? Explain about them?
Pod is the basic unit of kubernetes.

what is stateful Vs stateless in kubernetes
A stateless application is one which depends on no persistent storage. The only thing your cluster is responsible for is the code, and other static content, being hosted on it. That’s it, no changing databases, no writes and no left over files when the pod is deleted.
A stateful application, on the other hand, has several other parameters it is supposed to look like database, persistance volume, are syncwith the app or not.

Commands to list pods and deployments
kubectl describe pods my-pod
kubectl get pods

Tools to maintain kubernetes log files
What is init and side-car containers? Where we use these?
What is the link between pod and service
Two container in a pod. One is working other not. How can we find which one is not working
Monotoring tool of kubernetes if worked



