*********************GIT Complete Notes ***********************************************
GIT is a three phased commit
It has three stages
1. Working Tree
2. Staging Area / Indexing area
3. Local Repo
4. Remote Area
5. Staging Area

Working Tree is a working folder where code is written by an individual.
In my work 
ADD
Staging Area is the place where changes has to be added
Commit
After staging area is completed then it is committed to Local Repo
*** While committing it consider three factor ***
a) What is the time (Ex: default time of system)
b) Who is committing (Ex: $ git config --global user.email xxxxx $ git config --global user.name xxxx)
c) What are the changes with commit message (EX: git commit -m "<commit message>")

************************Process diagram***********************************************************
Working Tree ---**ADD + File Name**---> Staging Area ---**COMMIT + Message**--> Local Repo

***Note***
--> Git never give importance to empty folders.
--> git reset --hard only remove files that a part of git
--> git stores data in SHA-256 Hash algorithm. For same data same Hask id is given
--> Git never do anything to untracked files in branching concept
--> Repositories created with git init --bare are called bare repos. 
    They are structured a bit differently from working directories. 
	First off, they contain no working or checked out copy of your source files
	And second, bare repos store git revision history of your repo in the root 
	folder of your repository instead of in a .git subfolder. 
	Note… bare repositories are customarily given a .git extension.
--> How to remove a file
git rm file1.txt
git commit -m "remove file1.txt"
But if you want to remove the file only from the Git repository and not remove it from the filesystem, use:

git rm --cached file1.txt
git commit -m "remove file1.txt"	

******************************** END *****************************************************
Create a GITHUB account
Create a repository in GITHUB(Remote)
Install GIt on LOCAL machine Ex: GIT FOR WINDOWS.
Create a folder in Local Machine
Open the GIT BASH HERE inside the folder.

*****Create Repo******

$ git init---> to initialize git repository on local machine.
              We can see a folder .git on local machine.
			  
*****Syncing Repo*****

$ git remote add origin "<Link of remote Repo>"  
Ex: git remote add origin "https://github.com/crsreddy1447/RAJA.git"
we can get this link after signup to github click on clone.

$ git push origin master -----> To send all the files from local repo to central repo

$ git pull origin master -----> To fetch all the files from central repo to local repo.

******Making Changes********
To access to github use below 2 steps

$ git config --global user.email "crsreddy1447@gmail.com"
$ git config --global user.name "crsreddy1447"

****************How to Add GITHUB REPO and PUSH from CLI****************************

$ git remote add origin git@github.com:<UserName>/<RepoName>.git

Ex: git remote add origin git@github.com:crsreddy1447/MBA_Project.git

$ git push -u origin master

$ git remote -v

$ git pull <remote>

origin  git@github.com:crsreddy1447/MBA_Project.git (fetch)
origin  git@github.com:crsreddy1447/MBA_Project.git (push)

*********************************************************************************

$ git status ----> Tell you which files are added to index and are ready to commit.

$ git add -----> This will add files to your index.

$ git add -A  ----> to add all the files to staging area

$ git add -u ----> to add modified files

$ git commit  -----> Will commit to local repo
Ex: git commit -m "<commit message>"

$ git commit -a -m "<commit message>"  ----> to commit by adding files to local repo.

$ git log ----> It will show entire logs of files and commit with message.

***$ git reset --hard  ---> It rests the modified work done in working tree and staging area

$ git clean -fd < Dir Path>  ---> to delete or remove a newly created file

$ git checkout --<file Path>  ---> to reset a specific file in working tree

$ git log --oneline  ---> to get short commit IDs 

$ git checkout <commit id>  ---> to move across history or commits 

$ git cat-file -p <full commit id>  ---> to see the content in that commit.

$ cat .gitignore   ---> file specifies intentionally untracked files that Git should ignore

******Parallel Development*****

####Branching#### ----> It help in creating branches and combine code to master

$ git branch <branch name> -----> This will create a  new branch

$ git checkout <branch name or master> ----> switch to other branch or master
Ex: git checkout master ----> switches to master
    git checkout firstbranch -----> switches to first branch.
	
####Merging####	----> to merge branches to Master.
*Note: while doing this merge you have to be in master.

$ git merge <name of the branch that has to be merged with master>
Ex: git merge firstbranch
Now we can see entire content of firstbranch in master
*Note:It integrates the changes made in different branches into one single branch 

####Rebasing#### ----> Similar to merge. But on to tip of master in a linear way.

$ git rebase <from which branch the data have to merge>
Ex: (master branch)  $ git rebase firstbranch ----> it merge the data from firstbranch to master
*Note: it is used when changes made in one branch needs to be reflected in another branch

$ git rebase -i HEAD~<Position from top>  --> To modify/delete the commit which is not pushed to Remote Repo
EX: git rebase -i HEAD~2
*Note: This shouldnot done if I it is commited to Remote Repo

######Cherry PICK##########
-->Sometimes you don't want to merge a whole branch into another, and only need to pick one or two specific commits. 
   This process is called 'cherry picking'.
From new-features branch run 
$ git log --oneline  -->to get a better log of your commits history. Note that the commit hash is what we need to start the cherry picking. 

Checkout the branch where you want to cherry pick the specific commits. In this case master branch:
$ git checkout master

Now we can cherry pick from new-features branch:
$git cherry-pick d467740
  -->This will cherry pick the commit with hash d467740 and add it as a new commit on the master branch. Note: it will have a new (and different) commit ID in the master branch.

***If you want to cherry pick more than one commit in one go, you can add their commit IDs separated by a space:
$ git cherry-pick d467740 de906d4

***If the cherry picking gets halted because of conflicts, resolve them and
$ git cherry-pick --continue

########Stashing###########
you don’t want to do a commit of half-done work just so you can get back to this point later. 
The answer to this issue is the git stashing.
$ $ git stash
$ git stash list
$ git stash apply stash@{0} -->Apply one of the older stashes, you can specify it by naming it

******* GIT FLOW******
Connecting Local repo with remote repo

1. SSH connection
2. Generate keygen
3. open key file
4. goto setting ---> ssh and GPG keys ---> new ssh key
5. paste the key 
6. connect using $ ssh -T git@github.com

$ ssh-keygen
$ cat /c/Users/Rajashekar/.ssh/id_rsa.pub
$ ssh -T git@github.com

#####GIT
Which Branching Strategy
How to Git pull vs Git fetch
Git clone a specific branch
$ git clone -b <branch> <remote_repo>
Ex: $ git clone -b my-branch crsreddy1447/myproject.git
(OR)
$ git clone --single-branch --branch <branchname> <remote-repo>
Ex: git clone --single-branch -b dev crsreddy1447/myproject.git

Git folder name is changed after cloning. One of your team mate asked to share the link. How will i get.
ANS: goto .git folder and check from where last commit is done.
How to clone a specific branch or master Branch and the last commit only.
git clone --depth=1 --branch dev https://github.com/your/repo.git

What is Sub-Module and why we need sub module
Git submodules allow you to keep a git repository as a subdirectory of another git repository. 
Git submodules are simply a reference to another repository at a particular snapshot in time.
When adding a submodule to a repository a new .gitmodules file will be created. The .gitmodules file contains 
meta data about the mapping between the submodule project's URL and local directory.
git submodule add https://bitbucket.org/j
git clone /url/to/repo/with/submodules
git submodule init
git submodule update
https://www.atlassian.com/git/tutorials/git-submodule

Multiple file added to git. One of the file i want to take out of staging area?
If you need to remove a single file from the staging area, use
$ git reset HEAD -- <file>
If you need to remove a whole directory (folder) from the staging area, use
$ git reset HEAD -- <directoryName>

Conflicts in git
Command to list all the Branches
$ git branch -a   ---> -a shows all local and remote branches
$ git branch -r   ---> -r shows only remote branches

git reset. Types of git reset
Three types
1. Soft (Move HEAD): Here the Head move to previous commit and index and working directory are same.
$ git reset --soft Head~
2. Mixed (Updating the Index): Here Head and index file changes (also unstaged). But working dir is same 
$ git reset --mixed HEAD~
3. Hard (Updating the Working Directory): Here total Head, Index and working directory moves to previous one. looks like the 
$ git reset --hard HEAD~
https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified

How to delete local branch and remote branch
Deleting a branch LOCALLY:
Git will not let you delete the branch you are currently on so you must make sure to checkout a branch
$ git branch -d <branch>.  ----> -d option will delete the branch only if it has already been pushed and merged with the remote branch
EX: git branch -d fix/authentication
$ git branch -D <branch>. -D instead if you want to force the branch to be deleted, even if it hasn't been pushed or merged yet.
Deleting a branch REMOTELY: 
$ git push <remote_name> --delete <branch_name>
OR
$ git push <remote_name> :<branch_name>
If you get the error as push failed then use
$ git fetch -p  --->  -p flag means "prune". and try to sync the branch list.


Diff b/w git diff and git status
git satus only shows the modified files which are to be added
git diff shows the file content and matter that was modified by comparing with previous commit.
NOTE: $ git status -s  and $ git dif -name-only  both commands serves for same purpose

What are hooks in Git
Git hooks are scripts that run automatically every time a particular event occurs in a Git repository. 
Git Hooks we will find in .git folder > hooks
Two kind of Hooks
1. Client Hooks - 
2. Server Hooks - is used to call jenkins 

Note: githhub will not use server hooks. Because we are not managing the server. It is controlled by GITHUB
For this we will have Web hooks
  
///IMPORTANT Terms\\\\

git stash ---> It is used to develop a feature. It is not related to normal work. 
               It will break up the branch completely. 
			   To apply this to branch use $ git stash apply
Stashing: It is used when changes made in one branch needs to be reflected in another branch 
			   
git pull = git fetch + git merge
git pull and git fetch are same but fetch will create a branch and sent it to
									pull will directly sent to master branch
									
									

GIT FLOW---------------
Master
Develop
Release
Feature
HotFix

Master(Main) ---> Develop(Main)  ---> Release(Multiple Branches)  ---> Feature(Multiple Branches) ---> HotFix(Multiple Branches) 

From master branch we will take develop branch
Developer add features to feature branch once it is done he will merge it with develop branch
From Develop branch they make releases with versions
When release is good without any fixes then merge with master branch with a tag (give to customer) and also with developer branch.
Master is a branch where customer releases are done
Develop branch where developers work is kept
Hot fix branch here customer feedback and issues are fixed. Once fix is done we merge it with both Master and Developer Branch

Note: Developers work on feature Branch and Merge to Develop Branch
For Code review before sending it to Developers branch Developers do Patching
Ex: git diff <Develop Br> <Feature Br> >>../<ABC.patch>

Devops Engineer creates Day Builds and Night Builds on Develop Branch by Poll SCM or git hookes
Devops Engineer Has to create Release Branch and has to merge develop branch with Release Branch
Every release will be a sprint Branch. We configure Night Build on Release or sprint Branches

Day build is part where we give feedback to developer whether the code is merged correctly and working correctly or not. In day build we do basic testing
Night builds is a part where we give the release code to testing which takes much time. Testing like selenium, pert all automatic testing

Once release passes all tests then it is merged with Develop and master branch. 
While merging with master branch tag also given


All the developers take code from Develop Branch and create their own feature branch with feature number.
They work on feature branch once done merge it to Develop branch. 
Day builds are done on Develop branch if any build breaks its a high priority issues. Those are reverted back to developer for fixing.
Once all the development is finished we create Release Branch, based on scrum Master/Project Manager instructions.
Release Branch has to be very stable. Any fixes in release we work on it. After everything is ok we merge it to Develop and Merge Branch with a tag
Customer will get release from master.
Any fixes from customer is taken from master and pushed to Hot fix. Fixes there and again merge back to develop and master.

All the release, Develop and Master Branches are configured from Jenkins

Master Branch will always taken to Staging Environment and Production Environment
Master Branch we do night builds for two - three weeks with manual trigger. we do deployment to Staging,UAT,Pre-Prod,Production

Release branches we create night builds only when there is a change (manual trigger). Deploy to QA environment

Develop Branch both Day and Night builds. We automate triggers. we config dev and component testing(done by scrum team tester).
Day builds we do MVN package, testing and share test results  (project initial days only we create deploy)
Night builds we do MVn Package, testing and deployment.









