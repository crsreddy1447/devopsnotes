############ TERRAFORM COMPLETE

Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently.
Configuration files describe to Terraform the components needed to run an application. Based on that it generates an execution plan describing
what it will do to reach the desired state, and then executes it to build the described infrastructure. 
-> Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. 
-> Terraform can manage existing and popular service providers as well as custom in-house solutions.
-> Configuration files describe to Terraform the components needed to run a single application or your entire datacenter. 
-> Terraform is an ideal tool for building and managing multi-tier infrastructures. 
  ***Each tier can be described as a collection of resources, and the dependencies between each 
tier are handled automatically; 
  ***Terraform will ensure the database tier is available before the web servers are started 
and that the load balancers are aware of the web nodes. 
 ***Each tier can then be scaled easily using Terraform by modifying a single count configuration value. 
Because the creation and provisioning of a resource is codified and automated, elastically scaling with load becomes trivial.

**** In terraform  we give folder as input. In packer we give in files

The key features of Terraform are:
Infrastructure as Code: With a single code it develops the infrastructure required to work
Execution Plans: The execution plan shows what Terraform will do 
Resource Graph: Terraform builds a graph of all your resources, and parallelizes the creation as efficiently as possible.
Change Automation: Complex changesets can be applied to your infrastructure with minimal human interaction

Use Cases:
Multi-Tier Applications: Terraform is an ideal tool for building and managing these infrastructures. Each tier can be described as a collection of resources
Self-Service Clusters:Using Terraform, the knowledge of how to build and scale a service can be codified in a configuration.
Software Demos: a Terraform configuration to create, provision and bootstrap a demo on cloud providers like AWS. This allows end users to easily demo the software on their own

Terraform VS Other Tools:
1. Terraform is focused on destroying the resource instead of updating the resoure
2. Terraform uses resources dependencies and make the decision of what should be created first and when to create resources in parallel using ‘depends_on’ argument.
3. The terraform plan command is used to create an execution plan  for a set of changes matches your expectations without making any changes to real resources or to the state. 
.

//*/*/* USES OF TERRAFORM///*/*/*/*
1. Multi Cloud Deployment
2. Resource Schedulers
3. Software Demos
4. To create different Environment for Testing and Production
5. Multi Tier Applications

/*/*/*/*/*/*/*/*////*****SAMPLE MODEL*****/*/*/*/*/*/*/*/*/
Terraform declarative files:
1. Define Terraform version: This file is not required (Optional)
<terraform.tf> ==>

terraform {
  required_version = ">= 0.11.11"
}

2. Define AWS Provider: 
terraform init and it will download the necessary plug-ins for AWS
When terraform init is re-run with providers already installed, it will use an already-installed provider that meets the constraints in preference to downloading a new version. To upgrade to the latest acceptable version of each provider, run terraform init -upgrade. 
This command also upgrades to the latest versions of all Terraform modules.
***The PROVIDER block is used to configure the named provider, in our case "aws". 
A provider is responsible for creating and managing resources. 
Multiple provider blocks can exist if a Terraform configuration is composed of multiple providers, which is a common situation.

-->version: for constraining the allowed provider versions
-->alias: for using the same provider with different configurations for different resources
<provider.tf>
provider "aws" {
  region  = "${var.region}"
  profile = "${var.profile}"
}

3. Define AWS Resources: 
-----------------------------------
Resources are the most important element in the Terraform language. 
Each resource block describes one or more infrastructure objects, such as virtual networks, compute instances, 
Each resource type in turn belongs to a provider, which is a plugin for Terraform that offer.
When Terraform creates a new infrastructure object represented by a resource block, the identifier for that real object is saved in Terraform's state
Meta-Arguments in Resource file:
-->depends_on: to specify dependencies EX: s3 bucket access depends on IAM policy permission.
-->count: for creating multiple resource instances according to a count
-->for_each, to create multiple instances according to a map, or set of strings Ex: each.key & each.value
-->provisioner and connection: for taking extra actions after resource creation
***The RESOURCE block defines a resource that exists within the infrastructure. 
A resource might be a physical component such as an EC2 instance, or it can be a logical resource such as a Heroku application.
--> The resource block has two strings before opening the block: the resource type and the resource name. In our example, the resource type is "aws_instance" and the name is "example."
<resources.tf>
resource "aws_key_pair" "demo_key" {
  key_name   = "MyKeyPair"
  public_key = "${file(var.public_key)}"
}
-----------------------------------------
4. Define Terraform variables
This is used for dynamic purpose.
The variable declaration can optionally include a type argument to specify what value types are accepted
The variable declaration can also include a default argument. If present, the variable is considered to be optional and the default value will be used if no value is set when calling the module or running Terraform
Terraform also automatically loads a number of variable definitions files if they are present: Files named exactly terraform.tfvars or terraform.tfvars.json.
Variables on the Command Line:
$ terraform apply -var="image_id=ami-abc123"
<variables.tf>
variable "region" {
  default = "ap-southeast-1"
}
-------------------------------------------
5. Define Terraform Outputs (Optional)
This helps to display required output once .tf gets executed.
description, sensitive, and depends_on are argument of output
<outputs.tf>
output "instance_ip_addr" {
  value       = aws_instance.server.private_ip
  description = "The private IP address of the main server instance."
}
output "url-jenkins" {
  value = "http://${aws_instance.jenkins-ci.0.public_ip}:8080"
}
---------------------------------------------------
6. DATA SOURCES: A data source represents a piece of read-only information that is fetched from the provider (in this case, AWS) every time you run Terraform.
The data source and name together serve as an identifier for a given resource and so must be unique within a module.
The syntax for using a data source is very similar to the syntax of a resource:
data "<PROVIDER>_<TYPE>" "<NAME>" {
 [CONFIG ...]
}
To get the data out of a data source, you use the following attribute reference syntax:
data.<PROVIDER>_<TYPE>.<NAME>.<ATTRIBUTE>
Ex: data.aws_availability_zones.all.names
---------------------------------------------
7. MODULE: A module is a container for multiple resources that are used together. Every Terraform configuration has at least one module, known as its root module defined in the .tf files
Child Module can be used by "alias"
tf files in your working directory when you run terraform plan or terraform apply together form the root module. That module may call other modules and connect them together by passing output values from one to input values of another.
-------------------------------------------
8. STATE: State is used by Terraform to map real world resources to your configuration, keep track of metadata, and to improve performance for large infrastructures.
This state is stored by default in a local file named "terraform.tfstate.
-->Remote state: Terraform writes the state data to a remote data store, which can then be shared between all members of a team.
-->Sensitive Data: sensitive data with Terraform (like database passwords, user passwords, or private keys), treat the state itself as sensitive data.
----------------------------------
9. Provisioners: Provisioners can be used to model specific actions on the local machine or on a remote machine in order to prepare servers or other infrastructure objects for service.
-->Provisioners require access to the remote resource via SSH or WinRM, and expect a nested connection block with details
-->Provisioners that aren't directly associated with a specific resource, you can associate them with a null_resource
Built in Provisioners:
a. File Provisioner: Source, content, Destination arguments are used
EX: provisioner "file" {
    source      = "conf/myapp.conf"
    destination = "/etc/myapp.conf"
  }
b. Local-exec Provisioner: The local-exec provisioner invokes a local executable after a resource is created
Command (required), working_dir, environment --Arguments
EX: provisioner "local-exec" {
    command = "open WFH, '>completed.txt' and print WFH scalar localtime"
    interpreter = ["perl", "-e"]
  }
c. Remote-exec Provisioner: The remote-exec provisioner invokes a script on a remote resource after it is created. 
Inline, script/scripts ---> Arguments
Ex: provisioner "remote-exec" {
    inline = [
      "chmod +x /tmp/script.sh",
      "/tmp/script.sh args",
    ]
  }

REMOTE>exe VS LOCAL.exe:
------------------------
remote-exec: remote-exec provisioner helps invoke a script on the remote resource once it is created. We can provide a list of command strings which are executed in the order they are provided
local-exec: local-exec provisioner helps run a script on instance where we are running our terraform code, not on the resource we are creating
-------------------------------------------------------------------------------------------------------
Provisioning the full life-cycle management by running terraform apply:
Creating: resources with a plus sign (+) are going to be created (in green)
Updating: resources with a tilde sign (~) are going to be modified (in amber)
Deleting: resources with a minus sign (-) are going to be deleted (in red)

***** Initialization

The first command to run for a new configuration -- or after checking out an existing configuration from version control -- is 
===>  $ terraform init  // Initialization and download the necessary provider file
EX: terraform init <DIR Path>

===>  $ terraform validate  // It check the file for errors
EX: terraform validate <DIR Path>

===>  $ terraform plan  // To see the execution plan before executing. same as apply.
EX: terraform plan <DIR Path>

===>  $ terraform apply  // To see the execution Plan. and to build the file
EX: terraform apply <DIR Path>

===>  $ terraform show   // To inspect the current state 

==>   $ terraform destroy  // To delete the work  
EX: terraform destroy <DIR Path>

Q/A

1) What steps should be followed for making an object of one module to be available for the other module at a high level?
$ tree complete-module/
.
├── README.md
├── main.tf
├── variables.tf
├── outputs.tf
├── ...
├── modules/
│   ├── nestedA/
│   │   ├── README.md
│   │   ├── variables.tf
│   │   ├── main.tf
│   │   ├── outputs.tf
│   ├── nestedB/
│   ├── .../
├── examples/
│   ├── exampleA/
│   │   ├── main.tf
│   ├── exampleB/
│   ├── .../

Ex: provider "aws" {
    alias  = "usw2"
    region = "us-west-2"
}

# An example child module is instantiated with the _aliased_ configuration,
# so any AWS resources it defines will use the us-west-2 region.
module "example" {
  source    = "./example"
  providers = {
    aws = "aws.usw2"
  }
}

2) Are themes supported by terraforming?
Yes. Gtk themes are efficiently supported by the 0.3.1 version of terraforming. If your system contains a gtk theme, then it can be enabled by performing this:

3) Give a configuration of for creating a single E2C instance in Amazon Web Services ( AWS ).
provider "aws" {
region = "ap-south-1"
}
resource "aws_instance"
"example" {
ami = "ami-4fc58420"
instance_type = "t2.micro"
tags {
  Name = "terraform-example"
}
}

4) In case something went wrong, how will you handle and control rollbacks?
I will recommit the previous version of the code to be the new and current version in my VCS. 
With this a terraform run will be triggered which will be responsible for running the old code.

5) Mention the version controls that are supported besides GitHub?
 GitLab CE and GitLab EE are supported. Bucket cloud is also supported.

6) Can terraform be used for on-prem infrastructure?
Yes, Terraform can be used for on-prem infrastructure. There are many providers which are available. 
you can choose any one of them which suits you best

7) What do you mean by IaC?
IaC is an abbreviation to the term “Infrastructure as Code”. 
IaC refers to a system whereby developers can manage and provision the computer data centers automatically instead of getting into a manual process. 
Terraform, for instance, is an example tool of IaC.

8) Technology stacks used in company --- terraform
A tech stack is defined as the set of technologies an organization uses to build a web or mobile application. 
It is a combination of programming languages, frameworks, libraries, patterns, servers, UI/UX solutions, software, and tools used by its developers.
Terraform ---> Infrastucture and server tech stacks.

9) Can the Terraform Module Versions be locked anyhow?
Yes, there is a way to lock it. If as a source, a repository of Github is being used then in the query string, branch, and versions to be specified by'? ref '.

10) tfstate in terraform
This state is used by Terraform to map real world resources to your configuration, keep track of metadata, and to improve performance for large infrastructures. 
This state is stored by default in a local file named "terraform. tfstate"

11) How do I see object values when debugging terraform
Ans:$ terraform refresh
    $ terraform show

https://blog.gruntwork.io/an-introduction-to-terraform-f17df9c6d180
